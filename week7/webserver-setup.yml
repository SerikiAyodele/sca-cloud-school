---
# Run with ansible-playbook <filename> -u root
# 	(make sure to add the IPs of machines you want to manage to /etc/ansible/hosts first)

- hosts: webservers
  remote_user: vagrant
  become: yes
  become_user: root
  become_method: sudo

  vars:
    # used for filepaths
    site_name: "myproject"
    # used in the website's markup
    site_title: "My awesome project"
    # used in the web server configuration file
    site_url: "myproject.com"

  tasks:
    - name: Install Flask/Gunicorn Dependencies
      apt:
        name: "{{ packages }}"
      vars:
        packages:
        - python3-pip
        - python3-dev
        - build-essential
        - libssl-dev
        - libffi-dev
        - python3-setuptools
        - python3-venv 

    - name: Create Python Virtual Environment
      raw: cd /srv; mkdir {{ site_name }}; cd {{ site_name }}; python3 -m venv {{ site_name }}env

    - name: Update pip
      pip:
        name: pip
        state: latest
        virtualenv: /srv/{{ site_name }}/{{ site_name}}env

    - name: Setting up Flask and Gunicorn
      pip:
        name: 
          - wheel
          - gunicorn
          - flask
        virtualenv: /srv/{{ site_name }}/{{ site_name}}env

    - name: Create Project App
      template:
        src: "flaskguni/{{ site_name }}.py"
        dest: "/srv/{{ site_name }}"

    - name: Create the WSGI Entry Point
      template:
        src: "flaskguni/wsgi.py"
        dest: "/srv/{{ site_name }}"

    - name: Create Service File for Flask/Gunicorn
      template:
        src: "services/{{ site_name }}.service"
        dest: "/etc/systemd/system/"

    - name: Restart custom service, also issue daemon-reload to pick up config changes
      systemd:
        state: restarted
        daemon_reload: yes
        name: "{{ site_name }}.service"

    - name: Install nginx
      package: name=nginx state=latest

    - name: Create website directory
      file: path="/var/www/{{ site_name }}" state=directory mode=0755

    - name: Create main nginx config file
      template:
        src: "nginx/nginx.conf"
        dest: "/etc/nginx/nginx.conf"
      notify:
      - restart nginx

    - name: Create nginx vhost config file
      template:
        src: "nginx/{{ site_name }}.conf"
        dest: "/etc/nginx/sites-available/{{ site_name }}.conf"
      notify:
      - restart nginx

    - name: Create symlinks
      file: src=/etc/nginx/sites-available/{{ site_name }}.conf dest=/etc/nginx/sites-enabled/{{ site_name }}.conf state=link
      notify:
      - restart nginx

    - name: Remove default nginx vhost configuration
      file: path=/etc/nginx/sites-enabled/default state=absent
      notify:
      - restart nginx

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
